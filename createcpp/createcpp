#!/usr/bin/env python3

import sys
from string import Template

HPP_TEMPLATE = """/**
 * Copyright (C) Michal Goral, 2015
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 */

#ifndef $guard
#define $guard
$namespacesBegin
class $className
{
public:

};

$namespacesEnd
#endif // $guard
"""

CPP_TEMPLATE = """/**
 * Copyright (C) Michal Goral, 2015
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 */

#include "$className.hpp"
$namespacesBegin
$namespacesEnd
"""

def printUsage():
        print("usage: createcpp ns1::ns2::ClassName")

def main():
    if len(sys.argv) != 2:
        printUsage()
        return

    arg = sys.argv[1]

    if arg == "-h" or arg == "--help":
        printUsage()
        return

    splitted = arg.split("::")

    namespaces = splitted[:-1]
    namespacesUpper = [ ns.upper() for ns in namespaces ]
    className = splitted[-1]

    guard = "%s_HPP_" % className.upper()
    if len(namespacesUpper) > 0:
        guard = "%s_%s" % ("_".join(namespacesUpper), guard)

    namespacesBegin = ""
    namespacesEnd = ""
    for ns in namespaces:
        namespacesBegin = "%s\nnamespace %s\n{" % (namespacesBegin, ns)
        namespacesEnd = "} // namespace %s\n%s" % (ns, namespacesEnd)
    if len(namespacesBegin) > 0:
        namespacesBegin = "%s\n" % namespacesBegin
        namespacesEnd = "%s\n" % namespacesEnd

    substituteDict = {
        "guard" : guard,
        "className" : className,
        "namespacesBegin" : namespacesBegin,
        "namespacesEnd" : namespacesEnd,
    }

    hppTemplate = Template(HPP_TEMPLATE).substitute(substituteDict)
    cppTemplate = Template(CPP_TEMPLATE).substitute(substituteDict)

    with open("%s.hpp" % className, 'w') as f:
        f.write(hppTemplate)

    with open("%s.cpp" % className, 'w') as f:
        f.write(cppTemplate)
main()
